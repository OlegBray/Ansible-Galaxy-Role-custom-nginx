---
- name: Get instances from target group
  shell: |
    aws elbv2 describe-target-health \
      --region {{ aws_region }} \
      --target-group-arn {{ target_group_arn }} \
      --query "TargetHealthDescriptions[?TargetHealth.State=='healthy'].Target.Id" \
      --output text
  register: target_instances_result

- name: Convert space-separated instance IDs to list
  set_fact:
    all_target_instances: "{{ target_instances_result.stdout.split() }}"

- name: Debug Target Group Instance IDs
  debug:
    var: all_target_instances

- name: Get running status of target instances
  community.aws.ec2_instance_info:
    region: "{{ aws_region }}"
    instance_ids: "{{ all_target_instances }}"
  register: ec2_info

- name: Extract only running instance IDs
  set_fact:
    running_instances: >-
      {{
        ec2_info.instances
        | selectattr('state.name', 'equalto', 'running')
        | map(attribute='instance_id')
        | list
      }}

- name: Debug Running Instance IDs
  debug:
    var: running_instances

- name: Split servers into two batches dynamically
  set_fact:
    group1: "{{ running_instances[0::2] }}"
    group2: "{{ running_instances[1::2] }}"

- name: Debug groups
  debug:
    msg: "Group 1: {{ group1 }}, Group 2: {{ group2 }}"

- name: Set fact for completion status
  set_fact:
    all_healthy: true

- name: Rolling update group 1
  include_tasks: roles/nginx/tasks/main.yml
  vars:
    current_instance: "{{ item }}"
  loop: "{{ group1 }}"
  loop_control:
    loop_var: target_host

- name: Wait for group 1 instances to be healthy
  shell: |
    for i in {1..10}; do
      STATUS=$(aws elbv2 describe-target-health \
        --region {{ aws_region }} \
        --target-group-arn {{ target_group_arn }} \
        --query "TargetHealthDescriptions[?Target.Id=='{{ item }}'].TargetHealth.State" \
        --output text)
      echo "Health status: $STATUS"
      if [ "$STATUS" = "healthy" ]; then
        echo "Instance {{ item }} is healthy!"
        exit 0
      fi
      sleep 10
    done
    echo "Timeout waiting for instance {{ item }}"
    exit 1
  loop: "{{ group1 }}"
  register: health_results_group1

- name: Check if any instance in group 1 failed health check
  set_fact:
    all_healthy: false
  loop: "{{ health_results_group1.results }}"
  when: item.rc != 0
  
- name: Fail if any instance in group 1 is unhealthy
  fail:
    msg: "One or more instances in group 1 failed health checks. Cannot proceed with group 2 updates."
  when: not all_healthy

- name: Rolling update group 2
  include_tasks: roles/nginx/tasks/main.yml
  vars:
    current_instance: "{{ item }}"
  loop: "{{ group2 }}"
  loop_control:
    loop_var: target_host
  when: all_healthy

- name: Wait for group 2 instances to be healthy
  shell: |
    for i in {1..10}; do
      STATUS=$(aws elbv2 describe-target-health \
        --region {{ aws_region }} \
        --target-group-arn {{ target_group_arn }} \
        --query "TargetHealthDescriptions[?Target.Id=='{{ item }}'].TargetHealth.State" \
        --output text)
      echo "Health status: $STATUS"
      if [ "$STATUS" = "healthy" ]; then
        echo "Instance {{ item }} is healthy!"
        exit 0
      fi
      sleep 10
    done
    echo "Timeout waiting for instance {{ item }}"
    exit 1
  loop: "{{ group2 }}"
  register: health_results_group2
  when: all_healthy

- name: Reset health status for group 2
  set_fact:
    all_healthy: true
  when: all_healthy

- name: Check if any instance in group 2 failed health check
  set_fact:
    all_healthy: false
  loop: "{{ health_results_group2.results }}"
  when: item.rc is defined and item.rc != 0
  
- name: Report completion status
  debug:
    msg: "{{ 'All instances updated successfully and are healthy.' if all_healthy else 'Group 2 updates completed but some instances may not be healthy.' }}"